name: Build and Deploy to AWS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-fargate-app
  ECS_CLUSTER: my-fargate-app-cluster
  ECS_SERVICE: my-fargate-app-service
  TASK_DEFINITION_FAMILY: my-fargate-app-task

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to ECR
      run: |
        IMAGE_TAG=latest
        ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
        IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    - name: Update ECS service with new image
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
          --query "taskDefinition" --output json)

        NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE_URI "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest" \
          '.containerDefinitions[0].image=$IMAGE_URI | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

        echo "$NEW_TASK_DEF" > new-task-def.json

        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)

        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment
